name: Release Chart to OCI Registry

on:
  push:
    tags:
      - '*-v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., demo-app-v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Determine tag
        id: tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
          fi

      - name: Parse chart info from tag
        id: chart-info
        run: |
          tag="${{ steps.tag.outputs.tag }}"
          # Extract chart name and version from tag (format: chart-name-vX.Y.Z)
          chart_name=$(echo "$tag" | sed 's/-v[0-9].*//')
          version=$(echo "$tag" | sed 's/.*-v//')
          
          echo "chart-name=$chart_name" >> "$GITHUB_OUTPUT"
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Package and Push Chart to OCI Registry
        run: |
          chart_name="${{ steps.chart-info.outputs.chart-name }}"
          version="${{ steps.chart-info.outputs.version }}"
          
          echo "Packaging and pushing chart: $chart_name version $version"
          
          # Verify the chart exists and version matches
          if [ ! -d "charts/$chart_name" ]; then
            echo "Chart directory charts/$chart_name not found"
            exit 1
          fi
          
          chart_version=$(grep '^version:' "charts/$chart_name/Chart.yaml" | awk '{print $2}' | tr -d '"'"'"'"')
          if [ "$chart_version" != "$version" ]; then
            echo "Version mismatch: tag version $version != chart version $chart_version"
            exit 1
          fi
          
          # Package the chart
          helm package "charts/$chart_name"
          
          # Push to OCI registry
          helm push "${chart_name}-${version}.tgz" oci://ghcr.io/${{ github.repository_owner }}/helm-charts
          
          echo "Successfully pushed $chart_name:$version to OCI registry"

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          chart_name="${{ steps.chart-info.outputs.chart-name }}"
          version="${{ steps.chart-info.outputs.version }}"
          tag="${{ steps.tag.outputs.tag }}"
          
          # Create release notes
          cat > release_notes.md << EOF
          ## ${chart_name} v${version}
          
          ### 🚀 Installation (OCI Registry)
          \`\`\`bash
          # Install directly from OCI registry
          helm install my-release oci://ghcr.io/${{ github.repository_owner }}/helm-charts/${chart_name} --version ${version}
          \`\`\`
          
          ### 📦 Alternative Installation Methods
          \`\`\`bash
          # Pull chart locally first
          helm pull oci://ghcr.io/${{ github.repository_owner }}/helm-charts/${chart_name} --version ${version}
          helm install my-release ${chart_name}-${version}.tgz
          
          # Show chart information
          helm show chart oci://ghcr.io/${{ github.repository_owner }}/helm-charts/${chart_name} --version ${version}
          \`\`\`
          
          ### 🔍 Registry Information
          - **Registry**: \`ghcr.io/${{ github.repository_owner }}/helm-charts\`
          - **Chart**: \`${chart_name}\`
          - **Version**: \`${version}\`
          - **Full Reference**: \`oci://ghcr.io/${{ github.repository_owner }}/helm-charts/${chart_name}:${version}\`
          
          ### What's Changed
          - Released ${chart_name} chart version ${version} to OCI registry
          EOF
          
          # Create GitHub release
          gh release create "$tag" \
            --title "${chart_name} v${version}" \
            --notes-file release_notes.md
