name: Version Check, Tag, and Release

on:
  push:
    branches: [main]
    paths:
      - 'charts/**'
    tags:
      - '*-v*'
  workflow_dispatch:
    inputs:
      chart_name:
        description: 'Chart name to release (leave empty for all changed charts)'
        required: false
        type: string
      force_release:
        description: 'Force release even if no version change detected'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write

jobs:
  check-version-tag-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine workflow trigger
        id: trigger
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            echo "trigger=manual_tag" >> "$GITHUB_OUTPUT"
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "trigger=manual_dispatch" >> "$GITHUB_OUTPUT"
          else
            echo "trigger=auto_tag" >> "$GITHUB_OUTPUT"
          fi

      - name: Check for chart changes (auto-tag only)
        if: steps.trigger.outputs.trigger == 'auto_tag'
        id: check-changes
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q "^charts/"; then
            echo "charts-changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "charts-changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check version changes and create tags (auto-tag)
        if: steps.trigger.outputs.trigger == 'auto_tag' && steps.check-changes.outputs.charts-changed == 'true'
        id: create-tags
        run: |
          new_tags=""
          for chart_dir in charts/*/; do
            if [ ! -d "$chart_dir" ]; then continue; fi
            
            chart_name=$(basename "$chart_dir")
            chart_file="$chart_dir/Chart.yaml"
            
            if [ ! -f "$chart_file" ]; then continue; fi
            
            # Get current version
            current_version=$(grep '^version:' "$chart_file" | awk '{print $2}' | tr -d '"'"'"'"')
            
            # Check if tag exists
            tag_name="$chart_name-v$current_version"
            if ! git tag -l | grep -q "^$tag_name$"; then
              echo "Creating new tag: $tag_name"
              git tag "$tag_name"
              new_tags="$new_tags$tag_name "
            fi
          done
          
          if [ -n "$new_tags" ]; then
            echo "Pushing tags: $new_tags"
            git push origin --tags
            echo "new_tags=$new_tags" >> "$GITHUB_OUTPUT"
            echo "has_new_tags=true" >> "$GITHUB_OUTPUT"
            echo "Tags pushed successfully."
          else
            echo "No new tags to create."
            echo "has_new_tags=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set release info for manual triggers
        if: steps.trigger.outputs.trigger != 'auto_tag'
        id: manual-release
        run: |
          if [[ "${{ steps.trigger.outputs.trigger }}" == "manual_tag" ]]; then
            # Manual tag push - extract chart info
            tag_name="${{ steps.trigger.outputs.tag_name }}"
            chart_name=$(echo "$tag_name" | sed 's/-v[0-9].*//')
            version=$(echo "$tag_name" | sed 's/.*-v//')
            
            echo "release_needed=true" >> "$GITHUB_OUTPUT"
            echo "chart_name=$chart_name" >> "$GITHUB_OUTPUT"
            echo "version=$version" >> "$GITHUB_OUTPUT"
            echo "tag_name=$tag_name" >> "$GITHUB_OUTPUT"
          elif [[ "${{ steps.trigger.outputs.trigger }}" == "manual_dispatch" ]]; then
            # Manual workflow dispatch
            chart_name="${{ github.event.inputs.chart_name }}"
            if [[ -n "$chart_name" ]]; then
              chart_file="charts/$chart_name/Chart.yaml"
              if [[ -f "$chart_file" ]]; then
                version=$(grep '^version:' "$chart_file" | awk '{print $2}' | tr -d '"'"'"'"')
                tag_name="$chart_name-v$version"
                echo "release_needed=true" >> "$GITHUB_OUTPUT"
                echo "chart_name=$chart_name" >> "$GITHUB_OUTPUT"
                echo "version=$version" >> "$GITHUB_OUTPUT"
                echo "tag_name=$tag_name" >> "$GITHUB_OUTPUT"
              else
                echo "Chart not found: $chart_name" >&2
                exit 1
              fi
            else
              echo "release_needed=false" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Set up Helm
        if: steps.create-tags.outputs.has_new_tags == 'true' || steps.manual-release.outputs.release_needed == 'true'
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Login to GitHub Container Registry
        if: steps.create-tags.outputs.has_new_tags == 'true' || steps.manual-release.outputs.release_needed == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Release charts to OCI registry
        if: steps.create-tags.outputs.has_new_tags == 'true' || steps.manual-release.outputs.release_needed == 'true'
        run: |
          mkdir -p ./packages
          
          # Convert repository owner to lowercase for OCI registry
          repo_owner_lower=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          
          # Handle auto-tag scenario (multiple charts)
          if [[ "${{ steps.create-tags.outputs.has_new_tags }}" == "true" ]]; then
            for chart_dir in charts/*/; do
              if [ ! -d "$chart_dir" ]; then continue; fi
              
              chart_name=$(basename "$chart_dir")
              chart_file="$chart_dir/Chart.yaml"
              
              if [ ! -f "$chart_file" ]; then continue; fi
              
              # Get current version
              current_version=$(grep '^version:' "$chart_file" | awk '{print $2}' | tr -d '"'"'"'"')
              tag_name="$chart_name-v$current_version"
              
              # Only release if this tag was just created
              if echo "${{ steps.create-tags.outputs.new_tags || '' }}" | grep -q "$tag_name"; then
                echo "Releasing chart: $chart_name version $current_version"
                
                # Package the chart
                helm package "$chart_dir" --destination ./packages/
                
                # Push to OCI registry
                helm push "./packages/$chart_name-$current_version.tgz" oci://ghcr.io/$repo_owner_lower/helm-charts
                
                echo "Successfully released $chart_name:$current_version to OCI registry"
              fi
            done
          fi
          
          # Handle manual trigger scenario (single chart)
          if [[ "${{ steps.manual-release.outputs.release_needed }}" == "true" ]]; then
            chart_name="${{ steps.manual-release.outputs.chart_name }}"
            version="${{ steps.manual-release.outputs.version }}"
            chart_dir="charts/$chart_name"
            
            if [[ -d "$chart_dir" ]]; then
              echo "Releasing chart: $chart_name version $version (manual trigger)"
              
              # Package the chart
              helm package "$chart_dir" --destination ./packages/
              
              # Push to OCI registry
              helm push "./packages/$chart_name-$version.tgz" oci://ghcr.io/$repo_owner_lower/helm-charts
              
              echo "Successfully released $chart_name:$version to OCI registry"
            else
              echo "Chart directory not found: $chart_dir" >&2
              exit 1
            fi
          fi

      - name: Create GitHub Releases
        if: steps.create-tags.outputs.has_new_tags == 'true' || steps.manual-release.outputs.release_needed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Handle auto-tag scenario (multiple charts)
          if [[ "${{ steps.create-tags.outputs.has_new_tags }}" == "true" ]]; then
            for chart_dir in charts/*/; do
              if [ ! -d "$chart_dir" ]; then continue; fi
              
              chart_name=$(basename "$chart_dir")
              chart_file="$chart_dir/Chart.yaml"
              
              if [ ! -f "$chart_file" ]; then continue; fi
              
              # Get current version and description
              current_version=$(grep '^version:' "$chart_file" | awk '{print $2}' | tr -d '"'"'"'"')
              description=$(grep '^description:' "$chart_file" | sed 's/^description: *//' | tr -d '"'"'"'"')
              tag_name="$chart_name-v$current_version"
              
              # Only create release if this tag was just created
              if echo "${{ steps.create-tags.outputs.new_tags || '' }}" | grep -q "$tag_name"; then
                echo "Creating GitHub Release for: $chart_name version $current_version"
                
                # Package the chart if not already done
                if [ ! -f "./packages/$chart_name-$current_version.tgz" ]; then
                  helm package "$chart_dir" --destination ./packages/
                fi
                
                # Create simple release notes
                release_notes="Chart: $chart_name v$current_version - $description"
                
                # Create the release
                gh release create "$tag_name" \
                  "./packages/$chart_name-$current_version.tgz" \
                  --title "$chart_name v$current_version" \
                  --notes "$release_notes"
                
                echo "Successfully created GitHub Release for $chart_name:$current_version"
              fi
            done
          fi
          
          # Handle manual trigger scenario (single chart)
          if [[ "${{ steps.manual-release.outputs.release_needed }}" == "true" ]]; then
            chart_name="${{ steps.manual-release.outputs.chart_name }}"
            version="${{ steps.manual-release.outputs.version }}"
            tag_name="${{ steps.manual-release.outputs.tag_name }}"
            chart_file="charts/$chart_name/Chart.yaml"
            
            if [[ -f "$chart_file" ]]; then
              description=$(grep '^description:' "$chart_file" | sed 's/^description: *//' | tr -d '"'"'"'"')
              
              echo "Creating GitHub Release for: $chart_name version $version (manual trigger)"
              
              # Package the chart if not already done
              if [ ! -f "./packages/$chart_name-$version.tgz" ]; then
                helm package "charts/$chart_name" --destination ./packages/
              fi
              
              # Create simple release notes
              release_notes="Chart: $chart_name v$version - $description (Manual Release)"
              
              # Create or update the release
              if gh release view "$tag_name" >/dev/null 2>&1; then
                echo "Release already exists, updating..."
                gh release upload "$tag_name" "./packages/$chart_name-$version.tgz" --clobber
              else
                echo "Creating new release..."
                gh release create "$tag_name" \
                  "./packages/$chart_name-$version.tgz" \
                  --title "$chart_name v$version" \
                  --notes "$release_notes"
              fi
              
              echo "Successfully created/updated GitHub Release for $chart_name:$version"
            fi
          fi
